{"version":3,"sources":["shaders/vertex.glsl","shaders/fragment.glsl","index.ts"],"names":["module","exports"],"mappings":"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","file":"src.8a93e56a.js","sourceRoot":"../src","sourcesContent":["module.exports=\"#version 300 es\\n#define GLSLIFY 1\\n\\nlayout (location=0) in vec2 position;\\nlayout (location=1) in float index;\\nlayout (location=2) in vec3 color;\\n\\nout vec3 vColor;\\n\\nvec3 vertex_offsets[36] = vec3[36](\\n    //front\\n    vec3(-1.,  1.,  1.),\\n    vec3(-1., -1.,  1.),\\n    vec3( 1.,  1.,  1.),\\n\\n    vec3(-1., -1.,  1.),\\n    vec3( 1., -1.,  1.),\\n    vec3( 1.,  1.,  1.),\\n\\n    //back\\n    vec3(-1.,  1.,  -1.),\\n    vec3(-1., -1.,  -1.),\\n    vec3( 1.,  1.,  -1.),\\n\\n    vec3(-1., -1.,  -1.),\\n    vec3( 1., -1.,  -1.),\\n    vec3( 1.,  1.,  -1.),\\n\\n    //top\\n    vec3(-1.,  1.,  1.),\\n    vec3(-1.,  1., -1.),\\n    vec3( 1.,  1.,  1.),\\n\\n    vec3( 1.,  1., -1.),\\n    vec3(-1.,  1., -1.),\\n    vec3( 1.,  1.,  1.),\\n\\n    //bottom\\n    vec3(-1., -1.,  1.),\\n    vec3(-1., -1., -1.),\\n    vec3( 1., -1.,  1.),\\n\\n    vec3( 1., -1., -1.),\\n    vec3(-1., -1., -1.),\\n    vec3( 1., -1.,  1.),\\n\\n    //left\\n    vec3(-1., -1.,  1.),\\n    vec3(-1.,  1.,  1.),\\n    vec3(-1.,  1., -1.),\\n\\n    vec3(-1., -1.,  1.),\\n    vec3(-1., -1., -1.),\\n    vec3(-1.,  1., -1.),\\n\\n    //right\\n    vec3( 1., -1.,  1.),\\n    vec3( 1.,  1.,  1.),\\n    vec3( 1.,  1., -1.),\\n\\n    vec3( 1., -1.,  1.),\\n    vec3( 1., -1., -1.),\\n    vec3( 1.,  1., -1.)\\n);\\n\\nfloat[6] colorScale = float[6](\\n    1.0, //front\\n    0.3, //back\\n    0.8, //top\\n    0.7, //bottom\\n    0.6, //left\\n    0.8  //right\\n);\\n\\nfloat[6] depth = float[6](\\n     1.0, //front\\n     1.0, //back\\n     1.0, //top\\n     1.0, //bottom\\n     1.0, //left\\n     1.0  //right\\n);\\n\\nvoid main() {\\n    vec3 position = vertex_offsets[uint(index)];\\n    gl_Position = vec4(\\n        position[0] + .5 * position[2],  // x\\n        position[1] + .5 * position[2],  // y\\n        -position[2],                    // z\\n        2.                               // w\\n    );\\n    vColor = colorScale[uint(index/6.)] * vec3(color[0], color[1], color[2]);\\n}\\n\";","module.exports=\"#version 300 es\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nin vec3 vColor;\\nout vec4 fragColor;\\n\\nvoid main() {\\n    fragColor = vec4(vColor, 1.0);\\n}\\n\";","import vertexShaderSource from \"./shaders/vertex.glsl\";\nimport fragmentShaderSource from \"./shaders/fragment.glsl\";\n\nconst repeat = (n: number) => (x: any[]) => {\n    let result: any[] = [];\n    for (let i = 0; i < n; i++) {\n        result = result.concat(x);\n    }\n    return result;\n};\n\nconst range = (n: number) =>\n    Array(n)\n        .fill(null)\n        .map((_, i) => i);\n\nconst createGLContext = () => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.height = window.innerHeight;\n    // canvas.width = window.innerWidth;\n    canvas.width = canvas.height;\n    document.body.appendChild(canvas);\n\n    const gl = canvas.getContext(\"webgl2\");\n    if (!gl) {\n        throw new Error(\"WebGL 2.0 is not available in your browser :(\");\n    }\n    return gl;\n};\n\nconst nTriangles = 12;\n\nconst setup = (gl: WebGL2RenderingContext) => {\n    // Set background to solid grey\n    gl.clearColor(0.25, 0.25, 0.25, 1);\n\n    // Compile shaders\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\n    gl.shaderSource(vertexShader, vertexShaderSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n        console.error(gl.getShaderInfoLog(vertexShader));\n    }\n\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n        console.error(gl.getShaderInfoLog(fragmentShader));\n    }\n\n    // Link shaders to WebGL program\n    const program = gl.createProgram()!;\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error(gl.getProgramInfoLog(program));\n    }\n\n    // Finally, activate WebGL program\n    gl.useProgram(program);\n\n    // Setup Geometry\n    // Create a Vertex Buffer Object (VBO) and bind two buffers to it\n    // 1. positions\n    // prettier-ignore\n\n    const positions = new Float32Array(repeat(3 * nTriangles)([0, 0, -20]));\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(0);\n\n    // 3. indices\n    // prettier-ignore\n    const indices = new Float32Array(range(3 * nTriangles));\n    const indexBuffer = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(1, 1, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(1);\n\n    // 2. colours\n    // prettier-ignore\n    const colorData = [\n        ...repeat(36)(\n            repeat(3)([\n                1.0, 0.0, 0.0,\n            ])\n        ),\n        // ...repeat(2)(\n        //     repeat(3)([\n        //         0.0, 1.0, 0.0,\n        //     ])\n        // ),\n        // ...repeat(2)(\n        //     repeat(3)([\n        //         0.0, 0.0, 1.0,\n        //     ])\n        // ),\n        // ...repeat(2)(\n        //     repeat(3)([\n        //         1.0, 1.0, 0.0,\n        //     ])\n        // ),\n        // ...repeat(2)(\n        //     repeat(3)([\n        //         0.0, 1.0, 1.0,\n        //     ])\n        // ),\n        // ...repeat(2)(\n        //     repeat(3)([\n        //         1.0, 0.0, 1.0,\n        //     ])\n        // )\n    ];\n    console.log(colorData);\n    const colors = new Float32Array(colorData);\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(2);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n};\n\nconst draw = (gl: WebGL2RenderingContext) => {\n    // Fill background with one colour\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    // Instruct WebGL to draw triangles with a set of 3 vertices\n    gl.drawArrays(gl.TRIANGLES, 0, nTriangles * 3);\n};\n\nconst init = () => {\n    const gl = createGLContext();\n    setup(gl);\n    draw(gl);\n};\n\nwindow.addEventListener(\"DOMContentLoaded\", init);\n"]}